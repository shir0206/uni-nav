{"version":3,"sources":["components/Locate.js","components/MapTitle.js","components/Search.js","components/Routes.js","components/POIs.js","components/UserLocation.js","components/InfoRoute.js","components/InfoPOI.js","connectDB/connectDB.js","mapStyles/mapStyles.js","App.js","serviceWorker.js","index.js"],"names":["Locate","panTo","options","positionOptions","timeout","Infinity","maximumAge","enableHighAccuracy","className","onClick","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","console","log","src","alt","MapTitle","props","element","icon","faCoffee","Search","usePlacesAutocomplete","requestOptions","location","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","onSelect","address","a","getGeocode","results","onChange","e","target","disabled","placeholder","map","id","description","key","Routes","handleClick","event","route","latLng","setSelectedRoute","path","strokeColor","strokeOpacity","strokeWeight","icons","scale","offset","repeat","POIs","markers","marker","time","toISOString","setSelected","url","scaledSize","window","google","maps","Size","origin","Point","anchor","UserLocation","userLocation","InfoRoute","selectedRoute","onCloseClick","role","aria-label","width","height","InfoPOI","selected","formatRelative","Date","ConnectDB","featureType","elementType","stylers","visibility","hue","color","lightness","App","useState","setMarkers","setUserLocation","styles","mapStyles","disableDefaultUI","zoomControl","useLoadScript","googleMapsApiKey","process","region","language","libraries","isLoaded","loadError","onMapClick","useCallback","current","mapRef","useRef","onMapLoad","setZoom","mapContainerStyle","zoom","center","onLoad","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbdd624d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./locate.css\";\r\n\r\nexport const Locate = ({ panTo, options }) => {\r\n  const positionOptions = {\r\n    timeout: Infinity,\r\n    maximumAge: 0,\r\n    enableHighAccuracy: true,\r\n  };\r\n\r\n  function success() {}\r\n  function error() {}\r\n  function options() {}\r\n\r\n  return (\r\n    <button\r\n      className=\"locate\"\r\n      onClick={() => {\r\n        // navigator.geolocation.getCurrentPosition(success,error,options);\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            panTo({\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            });\r\n\r\n            console.log(\"your loction: \", position);\r\n          },\r\n          () => {\r\n            console.log(\"your loction not found\");\r\n          },\r\n          positionOptions\r\n        );\r\n      }}\r\n    >\r\n      <img\r\n        src=\"https://www.flaticon.com/svg/static/icons/svg/744/744848.svg\"\r\n        alt=\"compass-locate me\"\r\n      ></img>\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./mapTitle.css\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCoffee } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const MapTitle = (props) => {\r\n  const element = <FontAwesomeIcon icon={faCoffee} />;\r\n\r\n  return (\r\n    <h4 className=\"mapTitle\">\r\n      Uni-Nav <span>{element}</span>\r\n    </h4>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport \"./search.css\";\r\n\r\nimport {\r\n  Combobox,\r\n  ComboboxInput,\r\n  ComboboxPopover,\r\n  ComboboxList,\r\n  ComboboxOption,\r\n} from \"@reach/combobox\";\r\nimport \"@reach/combobox/styles.css\";\r\n\r\nimport usePlacesAutocomplete, {\r\n  getGeocode,\r\n  getLatLng,\r\n} from \"use-places-autocomplete\";\r\n\r\nexport const Search = (props) => {\r\n  const {\r\n    ready,\r\n    value,\r\n    suggestions: { status, data },\r\n    setValue,\r\n    clearSuggestions,\r\n  } = usePlacesAutocomplete({\r\n    requestOptions: {\r\n      location: { lat: () => 32.77005, lng: () => 35.008688 },\r\n      radius: 200 * 1000,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <Combobox\r\n        onSelect={async (address) => {\r\n          try {\r\n            const results = await getGeocode({ address });\r\n            console.log(results);\r\n          } catch (error) {\r\n            console.log(\"error\");\r\n          }\r\n\r\n          console.log(address);\r\n        }}\r\n      >\r\n        <ComboboxInput\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n          }}\r\n          disabled={!ready}\r\n          placeholder=\"Enter an address\"\r\n        />\r\n\r\n        <ComboboxPopover>\r\n          {status === \"OK\" &&\r\n            data.map(({ id, description }) => (\r\n              <ComboboxOption key={id} value={description} />\r\n            ))}\r\n        </ComboboxPopover>\r\n      </Combobox>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./routes.css\";\r\n\r\nimport { Polyline } from \"@react-google-maps/api\";\r\n\r\nexport const Routes = (props) => {\r\n  const roadA = [\r\n    { lat: 32.7640483, lng: 35.0166316 },\r\n    { lat: 32.763692, lng: 35.017082 },\r\n    { lat: 32.763361, lng: 35.016665 },\r\n    { lat: 32.7620995, lng: 35.0182302 },\r\n    { lat: 32.7623612, lng: 35.0200327 },\r\n    { lat: 32.763234, lng: 35.019025 },\r\n    { lat: 32.7628534, lng: 35.0185092 },\r\n  ];\r\n\r\n  const roadB = [\r\n    { lat: 32.762666, lng: 35.016366 },\r\n    { lat: 32.762135, lng: 35.016931 },\r\n    { lat: 32.761276, lng: 35.018554 },\r\n    { lat: 32.760545, lng: 35.019495 },\r\n  ];\r\n\r\n  const roadC = [\r\n    { lat: 32.761987, lng: 35.018321 },\r\n    { lat: 32.761033, lng: 35.019531 },\r\n    { lat: 32.761059, lng: 35.019671 },\r\n    { lat: 32.760919, lng: 35.019733 },\r\n    { lat: 32.760482, lng: 35.020131 },\r\n    { lat: 32.760568, lng: 35.020181 },\r\n    { lat: 32.760706, lng: 35.020186 },\r\n    { lat: 32.760803, lng: 35.020159 },\r\n    { lat: 32.760971, lng: 35.02017 },\r\n    { lat: 32.761009, lng: 35.020162 },\r\n    { lat: 32.761205, lng: 35.020409 },\r\n  ];\r\n\r\n  const lineSymbol = {\r\n    path: \"M 0,-1 0,1\",\r\n    strokeOpacity: 1,\r\n    scale: 4,\r\n  };\r\n\r\n  function handleClick(event, route) {\r\n    let lat = event.latLng.lat();\r\n    let lng = event.latLng.lng();\r\n\r\n    console.log(\"lat:\", lat, \" lng:\", lng);\r\n\r\n    props.setSelectedRoute({ lat, lng, route });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Polyline\r\n        path={roadA}\r\n        onClick={(e) => {\r\n          handleClick(e, \"A\");\r\n          console.log(\"roadA\");\r\n        }}\r\n        options={{\r\n          strokeColor: \"#FF69B4\",\r\n          strokeOpacity: 0,\r\n          strokeWeight: 8,\r\n          icons: [\r\n            {\r\n              icon: lineSymbol,\r\n              offset: \"0\",\r\n              repeat: \"20px\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n\r\n      <Polyline\r\n        path={roadB}\r\n        onClick={(e) => {\r\n          handleClick(e, \"B\");\r\n          console.log(\"roadB\");\r\n        }}\r\n        options={{\r\n          strokeColor: \"#00FF00\",\r\n          strokeOpacity: 0.5,\r\n          strokeWeight: 14,\r\n          icons: [\r\n            {\r\n              icon: \"hello\",\r\n              offset: \"0\",\r\n              repeat: \"50px\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n\r\n      <Polyline\r\n        path={roadC}\r\n        onClick={(e) => {\r\n          handleClick(e, \"C\");\r\n          console.log(\"roadC\");\r\n        }}\r\n        options={{\r\n          strokeColor: \"#FFFF00\",\r\n          strokeOpacity: 1,\r\n          strokeWeight: 4,\r\n          icons: [\r\n            {\r\n              icon: \"hello\",\r\n              offset: \"0\",\r\n              repeat: \"10px\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./POIs.css\";\r\nimport { Marker } from \"@react-google-maps/api\";\r\n\r\nexport const POIs = (props) => {\r\n  // Add manual marker on the map.\r\n\r\n  const markerIcon =\r\n    \"https://www.flaticon.com/svg/static/icons/svg/787/787535.svg\";\r\n\r\n  // url = svg source\r\n  // scaledSize = icon size\r\n  // origin = icon location reltivly the mouse click\r\n  // anchor = icon location reltivly the mouse click\r\n\r\n  return (\r\n    <>\r\n      {props.markers.map((marker) => (\r\n        <Marker\r\n          key={marker.time.toISOString()}\r\n          position={{ lat: marker.lat, lng: marker.lng }}\r\n          onClick={() => {\r\n            props.setSelected(marker);\r\n          }}\r\n          icon={{\r\n            url: markerIcon,\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n          }}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./POIs.css\";\r\nimport { Marker } from \"@react-google-maps/api\";\r\n\r\nexport const UserLocation = (props) => {\r\n  // Add manual marker on the map.\r\n\r\n  const userLocationIcon =\r\n    \"https://www.flaticon.com/svg/static/icons/svg/1831/1831908.svg\";\r\n\r\n  // url = svg source\r\n  // scaledSize = icon size\r\n  // origin = icon location reltivly the mouse click\r\n  // anchor = icon location reltivly the mouse click\r\n  if (props.userLocation)\r\n    return (\r\n      <>\r\n        <Marker\r\n          position={{\r\n            lat: props.userLocation.lat,\r\n            lng: props.userLocation.lng,\r\n          }}\r\n          icon={{\r\n            url: userLocationIcon,\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  else return null;\r\n};\r\n","import React from \"react\";\r\nimport \"./infoRoute.css\";\r\n\r\nimport { InfoWindow } from \"@react-google-maps/api\";\r\n\r\nexport const InfoRoute = (props) => {\r\n  return (\r\n    <>\r\n      {props.selectedRoute ? (\r\n        <InfoWindow\r\n          position={{\r\n            lat: props.selectedRoute.lat,\r\n            lng: props.selectedRoute.lng,\r\n          }}\r\n          onCloseClick={() => {\r\n            props.setSelectedRoute(null);\r\n          }}\r\n        >\r\n          <div>\r\n            <h2>\r\n              <span role=\"img\" aria-label=\"stars\">\r\n                ✨\r\n              </span>\r\n              {props.selectedRoute.route} מסלול\r\n            </h2>\r\n            <p>\r\n              לה לה לה\r\n              <span role=\"img\" aria-label=\"bear\">\r\n                🍉\r\n              </span>\r\n            </p>\r\n            <img\r\n              src=\"https://static.wixstatic.com/media/c8dca1_b0fb31fc412a4ab192045566f189550d~mv2.jpg\"\r\n              alt=\"uni\"\r\n              width=\"100px\"\r\n              height=\"100px\"\r\n            ></img>\r\n          </div>\r\n        </InfoWindow>\r\n      ) : (\r\n        console.log(\"fail\")\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./infoPOI.css\";\r\n\r\nimport { InfoWindow } from \"@react-google-maps/api\";\r\nimport { formatRelative } from \"date-fns\";\r\n\r\n\r\nexport const InfoPOI = (props) => {\r\n  return (\r\n    <>\r\n      {props.selected ? (\r\n        <InfoWindow\r\n          position={{ lat: props.selected.lat, lng: props.selected.lng }}\r\n          onCloseClick={() => {\r\n            props.setSelected(null);\r\n          }}\r\n        >\r\n          <div>\r\n            <h2>\r\n              <span role=\"img\" aria-label=\"bear\">\r\n                🐻\r\n              </span>\r\n              שלום\r\n            </h2>\r\n            <p>Time: {formatRelative(props.selected.time, new Date())}</p>\r\n            <img\r\n              src=\"https://www.srugim.co.il/i/wp-content/uploads/2015/06/%D7%90%D7%95%D7%A0%D7%99%D7%91%D7%A8%D7%A1%D7%99%D7%98%D7%AA-%D7%97%D7%99%D7%A4%D7%94-%D7%90%D7%9C%D7%A2%D7%93-%D7%92%D7%A8%D7%A9%D7%92%D7%95%D7%A8%D7%9F-%D7%98%D7%9E%D7%A7%D7%90__w650h331q80.jpg\"\r\n              alt=\"uni\"\r\n              width=\"100px\"\r\n              height=\"100px\"\r\n            ></img>\r\n          </div>\r\n        </InfoWindow>\r\n      ) : (\r\n        console.log(\"fail\")\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useCallback, useRef } from \"react\";\r\n\r\nimport mapPOIs from \"../mapPOIs/mapPOIs\";\r\n\r\nfunction ConnectDB() {\r\n  console.log(\"mapPOIs\" + mapPOIs[0].type);\r\n  return mapPOIs;\r\n}\r\n\r\nexport default ConnectDB;\r\n","// styles imported from: https://snazzymaps.com/\r\nexport default [\r\n  {\r\n      featureType: \"poi\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          visibility: \"on\",\r\n        },\r\n        {\r\n          hue: \"#1900ff\",\r\n        },\r\n        {\r\n          color: \"#c0e8e8\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          lightness: 100,\r\n        },\r\n        {\r\n          visibility: \"simplified\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"labels\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n      {\r\n    featureType: \"all\",\r\n    elementType: \"labels.text\",\r\n    stylers: [\r\n      {\r\n        visibility: \"on\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    featureType: \"road\",\r\n    elementType: \"labels.text.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#7b7b7b\",\r\n      },\r\n    ],\r\n  },\r\n{\r\n    featureType: \"road\",\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#ffffff\",\r\n      },\r\n    ],\r\n  },\r\n{\r\n    featureType: \"road.arterial\",\r\n    elementType: \"labels.icon\",\r\n    stylers: [\r\n      {\r\n        visibility: \"off\",\r\n      },\r\n    ],\r\n  },\r\n{\r\n    featureType: \"water\",\r\n    elementType: \"labels.text.fill\",\r\n    stylers: [\r\n      {\r\n        color: \"#070707\",\r\n      },\r\n    ],\r\n  },\r\n{\r\n    featureType: \"water\",\r\n    elementType: \"labels.text.stroke\",\r\n    stylers: [\r\n      {\r\n        color: \"#ffffff\",\r\n      },\r\n    ],\r\n  },\r\n  ];","import React, { useState, useCallback, useRef } from \"react\";\n\nimport { GoogleMap, useLoadScript } from \"@react-google-maps/api\";\n\nimport { Locate } from \"./components/Locate\";\nimport { MapTitle } from \"./components/MapTitle\";\nimport { Search } from \"./components/Search\";\nimport { Routes } from \"./components/Routes\";\nimport { POIs } from \"./components/POIs\";\nimport { UserLocation } from \"./components/UserLocation\";\nimport { InfoRoute } from \"./components/InfoRoute\";\nimport { InfoPOI } from \"./components/InfoPOI\";\nimport ConnectDB from \"./connectDB/connectDB\";\n\nimport mapStyles from \"./mapStyles/mapStyles\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [markers, setMarkers] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [selected, setSelected] = useState(null);\n  const [selectedRoute, setSelectedRoute] = useState(null);\n\n  const libraries = [\"places\"];\n\n  // styles: imported\n  // disableDefaultUI: View Butons: (Map)/(Satellite)\n  // zoomControl: Zoom Butons: (+)/(-)\n  const options = {\n    styles: mapStyles,\n    disableDefaultUI: true,\n    zoomControl: true,\n  };\n\n  //map loading msg\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    region: \"IL\",\n    language: \"iw\",\n    libraries,\n  });\n\n  // avoid recreading onclick on every single render of the app\n  const onMapClick = useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n    console.log(event);\n  }, []);\n\n  const mapRef = useRef();\n\n  //map from Google Maps\n  const onMapLoad = useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // map size style\n  const mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  const center = {\n    lat: 32.761987,\n    lng: 35.018321,\n  };\n\n  const panTo = useCallback(({ lat, lng }) => {\n    // setMarkers((current) => [\n    //   ...current,\n    //   {\n    //     lat: lat,\n    //     lng: lng,\n    //     time: new Date(),\n    //   },\n    // ]);\n\n    setUserLocation({ lat, lng });\n\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(20);\n  }, []);\n\n  const panTo2 = useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(18);\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n\n  return (\n    <div className=\"App\">\n      <MapTitle></MapTitle>\n\n      <Search></Search>\n\n      <Locate panTo={panTo} options={options}></Locate>\n\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={17}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        <Routes setSelectedRoute={setSelectedRoute}></Routes>\n\n        <POIs markers={markers} setSelected={setSelected}></POIs>\n\n        <InfoPOI selected={selected} setSelected={setSelected}></InfoPOI>\n\n        <InfoRoute\n          selectedRoute={selectedRoute}\n          setSelectedRoute={setSelectedRoute}\n        ></InfoRoute>\n\n        <UserLocation userLocation={userLocation}></UserLocation>\n      </GoogleMap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}