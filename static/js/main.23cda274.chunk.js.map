{"version":3,"sources":["mapStyles.js","App.js","serviceWorker.js","index.js"],"names":["Search","usePlacesAutocomplete","requestOptions","location","lat","lng","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","className","onSelect","address","a","getGeocode","results","console","log","onChange","e","target","disabled","placeholder","map","id","description","key","App","useLoadScript","googleMapsApiKey","libraries","isLoaded","loadError","useState","markers","setMarkers","selected","setSelected","onMapClick","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","options","styles","mapStyles","disableDefaultUI","zoomControl","element","icon","faCoffee","mapContainerStyle","width","height","zoom","center","onClick","onLoad","marker","toISOString","position","url","scaledSize","window","google","maps","Size","origin","Point","anchor","onCloseClick","role","aria-label","formatRelative","src","alt","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23cda274.chunk.js","sourcesContent":["    // styles from: https://snazzymaps.com/\r\n\r\nexport default [\r\n    {\r\n        \"featureType\": \"landscape.natural\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"color\": \"#e0efef\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"hue\": \"#1900ff\"\r\n            },\r\n            {\r\n                \"color\": \"#c0e8e8\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"lightness\": 100\r\n            },\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit.line\",\r\n        \"elementType\": \"geometry\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            },\r\n            {\r\n                \"lightness\": 700\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#7dcdcd\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\n\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport mapStyles from \"./mapStyles\";\nimport { formatRelative } from \"date-fns\";\n\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\n\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCoffee } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const libraries = [\"places\"];\n\n  //map loading msg\n  //    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAb5I39P1GekwpMaU0BEYI75p04ZaoXIbo\",\n\n    libraries,\n  });\n\n  const [markers, setMarkers] = useState([]);\n  const [selected, setSelected] = useState(null);\n\n  // avoid recreading onclick on every single render of the app\n  const onMapClick = useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n    console.log(event);\n  }, []);\n\n  const mapRef = useRef();\n\n  //map from Google Maps\n  const onMapLoad = useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  // map size style\n  const mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  const center = {\n    lat: 32.77005,\n    lng: 35.008688,\n  };\n\n  // disableDefaultUI Btns: Map, Satellite\n  // zoomControl Btns: +, -\n  const options = {\n    styles: mapStyles,\n    disableDefaultUI: true,\n    zoomControl: true,\n  };\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n\n  const element = <FontAwesomeIcon icon={faCoffee} />;\n\n  const markerIcon =\n    \"https://www.flaticon.com/svg/static/icons/svg/3528/3528209.svg\";\n\n  return (\n    <div className=\"App\">\n      <h4>\n        Uni-Nav <span>{element}</span>\n      </h4>\n\n      <Search></Search>\n\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={18}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {/* Add manual marker on the map.\n        \n        url = svg source\n        scaledSize = icon size\n        origin = icon location reltivly the mouse click\n        anchor = icon location reltivly the mouse click\n\n        */}\n        {markers.map((marker) => (\n          <Marker\n            key={marker.time.toISOString()}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            icon={{\n              url: markerIcon,\n              scaledSize: new window.google.maps.Size(30, 30),\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(15, 15),\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h2>\n                <span role=\"img\" aria-label=\"bear\">\n                  üêª\n                </span>\n                Alert\n              </h2>\n              <p>Time: {formatRelative(selected.time, new Date())}</p>\n              <img\n                src=\"https://www.srugim.co.il/i/wp-content/uploads/2015/06/%D7%90%D7%95%D7%A0%D7%99%D7%91%D7%A8%D7%A1%D7%99%D7%98%D7%AA-%D7%97%D7%99%D7%A4%D7%94-%D7%90%D7%9C%D7%A2%D7%93-%D7%92%D7%A8%D7%A9%D7%92%D7%95%D7%A8%D7%9F-%D7%98%D7%9E%D7%A7%D7%90__w650h331q80.jpg\"\n                alt=\"uni\"\n                width=\"100px\"\n                height=\"100px\"\n              ></img>\n            </div>\n          </InfoWindow>\n        ) : (\n          console.log(\"fail\")\n        )}\n      </GoogleMap>\n    </div>\n  );\n}\n\nfunction Search() {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 32.77005, lng: () => 35.008688 },\n      radius: 200 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          try {\n            const results = await getGeocode({ address });\n            console.log(results);\n          } catch (error) {\n            console.log(\"error\");\n          }\n\n          console.log(address);\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disabled={!ready}\n          placeholder=\"Enter an address\"\n        />\n\n        <ComboboxPopover>\n          {status === \"OK\" &&\n            data.map(({ id, description }) => (\n              <ComboboxOption key={id} value={description} />\n            ))}\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}